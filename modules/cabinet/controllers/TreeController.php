<?php

namespace app\modules\cabinet\controllers;

use Yii;
use app\modules\cabinet\controllers\DefaultController;
use \kartik\tree\controllers\NodeController;
use app\modules\cabinet\models\Tree;
use app\modules\cabinet\models\TreeSearch;
use yii\filters\VerbFilter;
use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;
use yii\image\drivers\Image;


class TreeController extends DefaultController
//class TreeController extends NodeController
{
//    public $layout = 'main';
//
//    public function actionSave()
//    {
//        Tree::uploadImageField($this);
//        return parent::actionSave(); // TODO: Change the autogenerated stub
//    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Tree models.
     * @return mixed
     */
    public function actionIndex()
    {
        return $this->render('index');
    }

    /**
     * Displays a single Tree model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Tree model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Tree();


        //if ( $model->load(Yii::$app->request->post()) && $model->save(false) ) {
        //if ( $model->load(Yii::$app->request->post())) {





        if(Yii::$app->request->post())
        {
            $model->file = UploadedFile::getInstance($model, 'file');
            if ($model->validate()) {
                $dir = Yii::getAlias('@app/web/uploads/');
                $this->image = strtotime('now') . '_' . Yii::$app->getSecurity()->generateRandomString(6) . '.' . $model->file->extension;
                $model->file->saveAs($dir . $this->image);
            }

            //return $this->redirect(['view', 'id' => $model->id]);
            return $this->render('create', [
                'model' => $model,
            ]);
        //}


        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Tree model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {

            Yii::$app->session->setFlash('success', "Статья сохранена");

            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Tree model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Tree model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Tree the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Tree::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
